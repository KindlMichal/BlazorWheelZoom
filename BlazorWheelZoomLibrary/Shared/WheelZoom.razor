@using Blazor
@inject IJSRuntime JSRuntime
@*<p>@X</p>
<p>@Y</p>*@

<img @ref=imgElement
     @onpointerdown=PointerDown @onpointerdown:preventDefault
     @onpointerup=PointerUp @onpointerup:preventDefault
     @onpointermove=PointerMove @onpointermove:preventDefault
     @onwheel=OnWheel @onwheel:stopPropagation @onwheel:preventDefault
     @onload="ImageLoaded"
     @attributes=AllOtherAttributes
     src="@src" />

@code {
        ElementReference imgElement;

        [Parameter]
        public string Image { get; set; }

        [Parameter]
        public double? ImageWidth { get; set; }
        [Parameter]
        public EventCallback<double?> ImageWithChanged { get; set; }

        [Parameter]
        public double? ImageHeight { get; set; }
        [Parameter]
        public EventCallback<double?> ImageHeightChanged { get; set; }

        [Parameter(CaptureUnmatchedValues = true)]
        public Dictionary<string, object> AllOtherAttributes { get; set; }

    public string src { get; set; }

    Blazor.ScaleManager X, Y;
    double currentScale = 1;

    public class JSRect
    {
        public double x { get; set; }
        public double y { get; set; }
        public double width { get; set; }
        public double height { get; set; }

        public static JSRect Parse(System.Text.Json.JsonElement input)
        {
            return new JSRect()
            {
                x = input.GetProperty("x").GetDouble(),
                y = input.GetProperty("y").GetDouble(),
                width = input.GetProperty("width").GetDouble(),
                height = input.GetProperty("height").GetDouble()
            };
        }

        public override string ToString()
        {
            return $"{x};{y};{width};{height}";
        }
    }

    protected override void OnInitialized()
    {
        src = Image; // Set real image so naturalWidth and naturalHeight works
    }

    // This event survive when image his effectively loaded and we can get size infos
    async Task ImageLoaded(ProgressEventArgs e)
    {
        await InitSize();
        UpdateStyle();
        await InvokeAsync(StateHasChanged);
    }

    public async Task RefreshAsync(string newImagePath = null)
    {
        if (!string.IsNullOrEmpty(newImagePath))
        {
            Image = newImagePath;
            ImageWidth = null;
            await ImageWithChanged.InvokeAsync(null);
            ImageHeight = null;
            await ImageHeightChanged.InvokeAsync(null);
        }
        InitImage();
        await InvokeAsync(StateHasChanged);
    }

    public async Task RefreshAsync(string newImagePath, double width, double height)
    {
        if (!string.IsNullOrEmpty(newImagePath))
        {
            Image = newImagePath;
            ImageWidth = width;
            await ImageWithChanged.InvokeAsync(width);
            ImageHeight = height;
            await ImageHeightChanged.InvokeAsync(height);
        }
        else
        {
            Image = null;
            ImageWidth = null;
            await ImageWithChanged.InvokeAsync(null);
            ImageHeight = null;
            await ImageHeightChanged.InvokeAsync(null);
        }
        InitImage();
        await InvokeAsync(StateHasChanged);
    }

    // First load the image putting it in src so we can't get back his size
    void InitImage()
    {
        // Put the real image here to get size infos
        src = Image;
        // Remove backgoud image
        if (AllOtherAttributes == null)
            AllOtherAttributes = new Dictionary<string, object>();
        HtmlAttributeHelper a = new HtmlAttributeHelper(AllOtherAttributes);
        HtmlStyleHelper style = a.style;
        style.Remove("background-image");
        a.style = style;
        AllOtherAttributes = a;
    }

    // Then change background-image and src image, compute size
    async Task InitSize()
    {
        if (AllOtherAttributes == null)
            AllOtherAttributes = new Dictionary<string, object>();
        HtmlAttributeHelper a = new HtmlAttributeHelper(AllOtherAttributes);
        HtmlStyleHelper style = a.style;
        if (!string.IsNullOrEmpty(Image))
        {
            style.SetOne("background-image", $"url(\"{Image}\")");
            style.SetOne("background-repeat", "no-repeat");
        }
        var boundingRect = JSRect.Parse(await JSRuntime.InvokeAsync<System.Text.Json.JsonElement>("WheelZoomJsFunctions.boundingRect", imgElement));
        double imageSizeX, imageSizeY;
        if (ImageWidth.HasValue)
            imageSizeX = ImageWidth.Value;
        else
        {
            imageSizeX = await JSRuntime.InvokeAsync<double>("WheelZoomJsFunctions.naturalWidth", imgElement);
            ImageWidth = imageSizeX;
            await ImageWithChanged.InvokeAsync(imageSizeX);
        }

        if (ImageHeight.HasValue)
            imageSizeY = ImageHeight.Value;
        else
        {
            imageSizeY = await JSRuntime.InvokeAsync<double>("WheelZoomJsFunctions.naturalHeight", imgElement);
            ImageHeight = imageSizeY;
            await ImageHeightChanged.InvokeAsync(imageSizeY);
        }

        X = new ScaleManager() { DocSize = imageSizeX, ViewSize = boundingRect.width };
        Y = new ScaleManager() { DocSize = imageSizeY, ViewSize = boundingRect.height };
        X.SetScale(currentScale);
        Y.SetScale(currentScale);
        // Create a transparent image with the same size
        string svg = $"<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"{imageSizeX}\" height=\"{imageSizeY}\" />";
        src = "data:image/svg+xml;base64," + Convert.ToBase64String(System.Text.ASCIIEncoding.ASCII.GetBytes(svg));
        a.style = style;
        AllOtherAttributes = a;
    }

    void UpdateStyle()
    {
        if (X != null && Y != null)
        {
            HtmlAttributeHelper a = new HtmlAttributeHelper(AllOtherAttributes);
            HtmlStyleHelper style = a.style;
            style.setCoord("background-size", new Coord(X.ActualViewSize, Y.ActualViewSize));
            style.setCoord("background-position", new Coord(X.ViewOffset, Y.ViewOffset));
            style.SetOne("cursor", mouseDown ? "grab" : "default");
            a.style = style;
            AllOtherAttributes = a;
        }
    }

    Task OnWheel(WheelEventArgs e)
    {
        if (X != null && Y != null)
        {
            // Find position in the image at scale 1
            double posX = X.ViewToDoc(e.ClientX);
            double poxY = Y.ViewToDoc(e.ClientY);
            if (e.DeltaY > 0)
                currentScale = currentScale / 1.1;
            else if (e.DeltaY < 0)
                currentScale = currentScale * 1.1;
            currentScale = Math.Max(0.1, Math.Min(10, currentScale));
            X.SetScale(currentScale);
            Y.SetScale(currentScale);
            X.ComputeOffset(posX, e.ClientX);
            Y.ComputeOffset(poxY, e.ClientY);
            // We want this newPos point under the mouse
            UpdateStyle();
        }
        return Task.CompletedTask;
    }

    bool mouseDown = false;
    double mouseDownX, mouseDownY;
    double mouseDownImageX, mouseDownImageY;
    async Task PointerDown(PointerEventArgs e)
    {
        if (X != null && Y != null)
        {
            mouseDown = true;
            mouseDownX = e.ClientX;
            mouseDownY = e.ClientY;
            mouseDownImageX = X.ViewOffset;
            mouseDownImageY = Y.ViewOffset;
            await JSRuntime.InvokeVoidAsync("WheelZoomJsFunctions.capturePointer", imgElement, e.PointerId);
            await JSRuntime.InvokeVoidAsync("WheelZoomJsFunctions.setFocus", imgElement);
            UpdateStyle();
        }
    }

    async Task PointerUp(PointerEventArgs e)
    {
        mouseDown = false;
        await JSRuntime.InvokeVoidAsync("WheelZoomJsFunctions.releasePointer", imgElement, e.PointerId);
        UpdateStyle();
    }

    Task PointerMove(PointerEventArgs e)
    {
        if (mouseDown && X != null && Y != null)
        {
            X.SetViewOffset(mouseDownImageX + e.ClientX - mouseDownX);
            Y.SetViewOffset(mouseDownImageY + e.ClientY - mouseDownY);
            UpdateStyle();
        }
        return Task.CompletedTask;
    }

}
